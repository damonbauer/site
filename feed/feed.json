{
	"version": "https://jsonfeed.org/version/1.1",
	"title": "Damon Bauer",
	"language": "en",
	"home_page_url": "https://damonbauer.dev/",
	"feed_url": "https://damonbauer.dev/feed/feed.json",
	"description": "Sharing practical tips and clear guides on React, React Native, Ruby, and Ruby on Rails. Written by a developer for developers who value simplicity and efficient code.",
	"author": {
		"name": "Damon Bauer",
		"url": "https://damonbauer.dev/"
	},
	"items": [
		{
			"id": "https://damonbauer.dev/blog/sectionlist-getitemlayout-npm/",
			"url": "https://damonbauer.dev/blog/sectionlist-getitemlayout-npm/",
			"title": "Creating a better getItemLayout for SectionList in React Native",
			"content_html": "<p>TLDR: Today, I published a new <code>npm</code> package called <a href=\"https://github.com/damonbauer/react-native-get-item-layout-section-list\"><code>react-native-get-item-layout-section-list</code></a>. This package is a helper for the <code>getItemLayout</code> prop in a <code>SectionList</code> in React Native.</p>\n<hr>\n<h2 id=\"motivation\" tabindex=\"-1\">Motivation <a class=\"header-anchor\" href=\"https://damonbauer.dev/blog/sectionlist-getitemlayout-npm/\" aria-hidden=\"true\">#</a></h2>\n<p>The <code>getItemLayout</code> prop in a <code>SectionList</code> is an optimization prop that improves performance of the list by helping it to quickly calculate the size and position of its items.</p>\n<p>When you provide the <code>getItemLayout</code> prop, React Native can:</p>\n<ul>\n<li>Jump directly to any list item without sequentially rendering all previous items.</li>\n<li>Maintain scroll position accurately during layout changes or content updates.</li>\n<li>Reduce the need for dynamic measurement as users scroll, leading to smoother experiences.</li>\n<li>Access other props, such as <code>initialScrollIndex</code> and <code>scrollToLocation</code></li>\n</ul>\n<h3 id=\"flatlist\" tabindex=\"-1\"><code>FlatList</code> <a class=\"header-anchor\" href=\"https://damonbauer.dev/blog/sectionlist-getitemlayout-npm/\" aria-hidden=\"true\">#</a></h3>\n<p>In a <code>FlatList</code>, it's actually pretty trivial (especially with fixed item heights); you need to return an object with the <code>length</code>, <code>offset</code>, and <code>index</code> properties:</p>\n<pre class=\"language-ts\" tabindex=\"0\"><code class=\"language-ts\">getItemLayout<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  length<span class=\"token operator\">:</span> <span class=\"token constant\">ITEM_HEIGHT</span><span class=\"token punctuation\">,</span>\n  offset<span class=\"token operator\">:</span> <span class=\"token constant\">ITEM_HEIGHT</span> <span class=\"token operator\">*</span> index<span class=\"token punctuation\">,</span>\n  index<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></code></pre>\n<p>However, in a <code>SectionList</code>, it's a bit more complicated. The <code>offset</code> is calculated on a number of different things:</p>\n<ul>\n<li>list header</li>\n<li>section headers</li>\n<li>items</li>\n<li>item separators</li>\n<li>section footers</li>\n<li>section separators</li>\n</ul>\n<p>Additionally, the only <em>real</em> documentation for <code>getItemLayout</code> is on <a href=\"https://reactnative.dev/docs/flatlist#getitemlayout\">the <code>FlatList</code> page</a>, and that doesn't help much when you're trying to figure out how to calculate the <code>offset</code> for a <code>SectionList</code>.</p>\n<p>This is where the <a href=\"https://github.com/damonbauer/react-native-get-item-layout-section-list\"><code>react-native-get-item-layout-section-list</code></a> package comes in. It provides a helper function that allows you to pass all of the possible options that effect <code>offset</code> and performs the calculations for you.</p>\n",
			"date_published": "2024-03-19T00:00:00Z"
		}
		,
		{
			"id": "https://damonbauer.dev/blog/cypress-exec/",
			"url": "https://damonbauer.dev/blog/cypress-exec/",
			"title": "Seeding database with cy.exec",
			"content_html": "<p>Recently, I found out that <a href=\"https://cypress.io\">Cypress</a> has a command that can run arbitrary commands, <a href=\"https://docs.cypress.io/api/commands/exec\"><code>cy.exec</code></a>. I've used this to setup my local database with seed data before tests run.</p>\n<p>However, the back end I'm working with doesn't have a <strong>deterministic, predictable</strong> seeder, so the test data is not guaranteed. So, I did some fun stuff with Postgres!</p>\n<h2 id=\"dump-the-current-state-of-the-database\" tabindex=\"-1\">Dump the current state of the database <a class=\"header-anchor\" href=\"https://damonbauer.dev/blog/cypress-exec/\" aria-hidden=\"true\">#</a></h2>\n<p>The first thing I did was get the database into the state that I want. Then, I used <code>psql</code> to dump the data into a <code>.sql</code> file:</p>\n<pre class=\"language-shell\" tabindex=\"0\"><code class=\"language-shell\">psql <span class=\"token parameter variable\">-f</span> seed.sql <span class=\"token parameter variable\">-d</span> postgres <span class=\"token parameter variable\">-h</span> <span class=\"token number\">192.168</span>.64.5 <span class=\"token parameter variable\">-p</span> <span class=\"token number\">31091</span> <span class=\"token parameter variable\">-U</span> postgres <span class=\"token parameter variable\">-W</span></code></pre>\n<p>This script sets up the connection to the database I want, and outputs the contents to <code>seed.sql</code>.</p>\n<h2 id=\"clean-the-database\" tabindex=\"-1\">Clean the database <a class=\"header-anchor\" href=\"https://damonbauer.dev/blog/cypress-exec/\" aria-hidden=\"true\">#</a></h2>\n<p>Next, I needed to clean the database. I tried using a <code>--clean</code> flag, but that didn't seem to work. So, I wrote a separate <code>.sql</code> file (<code>truncate.sql</code>) to truncate everything:</p>\n<pre class=\"language-shell\" tabindex=\"0\"><code class=\"language-shell\"><span class=\"token comment\"># truncate.sql</span>\nTRUNCATE TABLE public.table_name RESTART IDENTITY CASCADE<span class=\"token punctuation\">;</span>\nTRUNCATE TABLE public.another_table_name RESTART IDENTITY CASCADE<span class=\"token punctuation\">;</span>\n<span class=\"token comment\"># more TRUNCATE statements...</span></code></pre>\n<h2 id=\"execute-psql-within-cypress\" tabindex=\"-1\">Execute <code>psql</code> within <code>cypress</code> <a class=\"header-anchor\" href=\"https://damonbauer.dev/blog/cypress-exec/\" aria-hidden=\"true\">#</a></h2>\n<p>Now, all that was left was to execute some <code>psql</code> from within my <code>cypress</code> test. I put the 2 <code>.sql</code> files inside <code>./cypress/data</code>.</p>\n<p>I also stored the connection values from above (database name, host, port user, password) in <code>./cypress.json</code> as environment variables.</p>\n<pre class=\"language-json\" tabindex=\"0\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"baseUrl\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"http://0.0.0.0:8080\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"supportFile\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"cypress/support/index.ts\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"viewportHeight\"</span><span class=\"token operator\">:</span> <span class=\"token number\">768</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"viewportWidth\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"env\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"PGDATABASE\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"postgres\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"PGHOST\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"192.168.64.5\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"PGPORT\"</span><span class=\"token operator\">:</span> <span class=\"token number\">31091</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"PGUSER\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"postgres\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"PGPASSWORD\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"postgres\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Now, I'm ready to use <code>cy.exec</code>. Here, I'm executing an arbitrary shell command, combining 2 <code>psql</code> commands to truncate, then seed the database.</p>\n<p>Note that I'm providing another <code>env</code> object; Cypress merges these environment variables in with the system environment variables, so I was able to use the same names that Postgres looks for automatically. I'm retrieving the values from <code>cypress.json</code> by using <code>Cypress.env</code>.</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'A test suite description'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">before</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        cy<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span>\n            <span class=\"token string\">'psql -f ./cypress/data/truncate.sql &amp;&amp; psql -f ./cypress/data/seed.sql'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token literal-property property\">env</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token constant\">PGDATABASE</span><span class=\"token operator\">:</span> Cypress<span class=\"token punctuation\">.</span><span class=\"token function\">env</span><span class=\"token punctuation\">(</span><span class=\"token string\">'PGDATABASE'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token constant\">PGHOST</span><span class=\"token operator\">:</span> Cypress<span class=\"token punctuation\">.</span><span class=\"token function\">env</span><span class=\"token punctuation\">(</span><span class=\"token string\">'PGHOST'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token constant\">PGPORT</span><span class=\"token operator\">:</span> Cypress<span class=\"token punctuation\">.</span><span class=\"token function\">env</span><span class=\"token punctuation\">(</span><span class=\"token string\">'PGPORT'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token constant\">PGUSER</span><span class=\"token operator\">:</span> Cypress<span class=\"token punctuation\">.</span><span class=\"token function\">env</span><span class=\"token punctuation\">(</span><span class=\"token string\">'PGUSER'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token constant\">PGPASSWORD</span><span class=\"token operator\">:</span> Cypress<span class=\"token punctuation\">.</span><span class=\"token function\">env</span><span class=\"token punctuation\">(</span><span class=\"token string\">'PGPASSWORD'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n<p>Here's the output:</p>\n<p><img src=\"https://user-images.githubusercontent.com/368723/126814496-057f7d84-4340-4a14-a28d-307190e5daa2.png\" alt=\"Screen Shot 2021-07-23 at 11 43 11 AM\"></p>\n",
			"date_published": "2021-07-23T00:00:00Z"
		}
		,
		{
			"id": "https://damonbauer.dev/blog/convert-npm-script-to-node-script/",
			"url": "https://damonbauer.dev/blog/convert-npm-script-to-node-script/",
			"title": "Use node to enhance an npm script",
			"content_html": "<p>Here's a way that I like to enhance a minimal npm script by using node.</p>\n<p>Given this folder structure:</p>\n<pre class=\"language-shell\" tabindex=\"0\"><code class=\"language-shell\"><span class=\"token punctuation\">..</span>\n└── projects\n    ├── Aces\n    │   └── translations\n    │       └── en-US.json\n    ├── Clubs\n    │   └── translations\n    │       └── en-US.json\n    ├── Hearts\n    │   └── translations\n    │       └── en-US.json\n    └── Spades\n        └── translations\n            └── en-US.json</code></pre>\n<p>I've got an npm script that uses the <code>formatjs</code> cli to extract translations for each of the folders in the <code>projects</code> folder. Here it is, from <code>package.json</code>:</p>\n<pre class=\"language-json\" tabindex=\"0\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"i18n:extract\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"formatjs extract\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Now, to run this, numerous flags &amp; options have to be provided. Here's how the <code>extract</code> script is executed:</p>\n<pre class=\"language-shell\" tabindex=\"0\"><code class=\"language-shell\"><span class=\"token function\">npm</span> run i18n:extract -- <span class=\"token string\">'projects/Hearts/**/*.ts*'</span> --out-file projects/Hearts/translations/en-US.json --id-interpolation-pattern <span class=\"token string\">'[sha512:contenthash:base64:6]'</span></code></pre>\n<p>I'd like to remove the hassle of:</p>\n<ul>\n<li>remembering the options/flags order</li>\n<li>having to pass specific folder names</li>\n<li>remembering the <code>id-interpolation-pattern</code> flag and value</li>\n</ul>\n<hr>\n<p>Now, let's take a look at how we can improve this by prompting to ask which project we want to run the script for.</p>\n<p>First, we'll update the script in <code>package.json</code> to use <code>node</code> to execute a custom file:</p>\n<pre class=\"language-json\" tabindex=\"0\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"i18n:extract\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"node i18n-extract.js\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>and install 2 <code>devDependencies</code>:</p>\n<pre class=\"language-shell\" tabindex=\"0\"><code class=\"language-shell\"><span class=\"token function\">npm</span> i <span class=\"token parameter variable\">-D</span> execa prompts</code></pre>\n<h3 id=\"getting-a-list-of-project-names\" tabindex=\"-1\">Getting a list of project names <a class=\"header-anchor\" href=\"https://damonbauer.dev/blog/convert-npm-script-to-node-script/\" aria-hidden=\"true\">#</a></h3>\n<p>Now, we need a way to get a list of the projects in the <code>projects/</code> directory. In a new file at the root of the project (let's call it <code>utilities.js</code>):</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">const</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fs'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> projectsPath <span class=\"token operator\">=</span> __dirname <span class=\"token operator\">+</span> <span class=\"token string\">'/projects'</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">projectNames</span><span class=\"token operator\">:</span> fs\n    <span class=\"token punctuation\">.</span><span class=\"token function\">readdirSync</span><span class=\"token punctuation\">(</span>projectsPath<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fileOrDir</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n      fs<span class=\"token punctuation\">.</span><span class=\"token function\">statSync</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>projectsPath<span class=\"token punctuation\">,</span> fileOrDir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isDirectory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p>This script exports an object with a key of <code>projectNames</code>, which is a node <code>fs</code> (filesystem) process that crawls the <code>projectsPath</code> directory &amp; filters out everything that is not a directory - leaving us with an array of strings that are the names of the folders in the <code>projects</code> directory.</p>\n<h3 id=\"i18n-extract-js\" tabindex=\"-1\">i18n-extract.js <a class=\"header-anchor\" href=\"https://damonbauer.dev/blog/convert-npm-script-to-node-script/\" aria-hidden=\"true\">#</a></h3>\n<p>Within a new <code>i18n-extract.js</code> file, we can use our new <code>utilities</code> file to prompt the user for the project they want to work with:</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">const</span> prompts <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'prompts'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> projectNames <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./utilities'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> projectPrompt <span class=\"token operator\">=</span> <span class=\"token function\">prompts</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'autocomplete'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'project'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">message</span><span class=\"token operator\">:</span> <span class=\"token string\">'Choose project:'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">choices</span><span class=\"token operator\">:</span> projectNames<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">choice</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> choice<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> choice <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> project <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> projectPrompt<span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Selected project: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>project<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>At this point, the selected project name is available in the <code>project</code> constant. Here's what we've got:</p>\n<p><img src=\"https://user-images.githubusercontent.com/368723/119405924-a3e22800-bca7-11eb-967f-bfef5da85b19.gif\" alt=\"demo-1\"></p>\n<p>Now, let's replace the hand typed <code>formatjs extract</code> bash command:</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> project <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> projectPrompt<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">await</span> <span class=\"token function\">execa</span><span class=\"token punctuation\">(</span> <span class=\"token comment\">// 1</span>\n            <span class=\"token string\">'formatjs'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 2</span>\n            <span class=\"token punctuation\">[</span>\n                <span class=\"token string\">'extract'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 3</span>\n                <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">'projects/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>project<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/**/*.ts*' --out-file projects/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>project<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/translations/en-US.json --id-interpolation-pattern '[sha512:contenthash:base64:6]'</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 4</span>\n            <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">shell</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span> <span class=\"token comment\">// 5 </span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>stdout<span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>stdout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 6</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error: '</span><span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>The actual script itself isn't super relevant for this post, but here are some notes:</p>\n<ol>\n<li><code>execa</code> is used to make executing in a child process nice &amp; easy</li>\n<li><code>formatjs</code> is the binary to execute. <code>execa</code> finds the file automatically (it lives in <code>./node_modules/.bin</code>)</li>\n<li>The values in the array are arguments to pass to the command in #2</li>\n<li>Interpolates the <code>project</code> variable, using the value the user chose in the prompt</li>\n<li>We need to pass <code>shell: true</code> as an option, otherwise the node script won't spawn the correct process</li>\n<li><code>stdout</code> is piped through, so we can see any status codes or messages</li>\n</ol>\n<hr>\n<p>That's pretty much it! Hope it helps. Here's the final <code>i18n-extract.js</code> file, altogether:</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">const</span> prompts <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'prompts'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> projectNames <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./utilities'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> projectPrompt <span class=\"token operator\">=</span> <span class=\"token function\">prompts</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'autocomplete'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'project'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">message</span><span class=\"token operator\">:</span> <span class=\"token string\">'Choose project:'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">choices</span><span class=\"token operator\">:</span> projectNames<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">choice</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> choice<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> choice <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> project <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> projectPrompt<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">await</span> <span class=\"token function\">execa</span><span class=\"token punctuation\">(</span>\n            <span class=\"token string\">'formatjs'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">[</span>\n                <span class=\"token string\">'extract'</span><span class=\"token punctuation\">,</span>\n                <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">'projects/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>project<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/**/*.ts*' --out-file projects/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>project<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/translations/en-US.json --id-interpolation-pattern '[sha512:contenthash:base64:6]'</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">shell</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span> \n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>stdout<span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>stdout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error: '</span><span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n",
			"date_published": "2021-05-24T00:00:00Z"
		}
		,
		{
			"id": "https://damonbauer.dev/blog/stimulus-toggle/",
			"url": "https://damonbauer.dev/blog/stimulus-toggle/",
			"title": "Stimulus Toggle Utility",
			"content_html": "<p>I made a <a href=\"https://stimulusjs.org/\">Stimulus</a> controller to handle toggling elements. It's basic, but does what I need.</p>\n<p>Check it out here: <a href=\"https://www.npmjs.com/package/stimulus-toggle-util\">npm</a>, <a href=\"https://github.com/damonbauer/stimulus-toggle-util\">GitHub</a></p>\n",
			"date_published": "2020-04-13T00:00:00Z"
		}
		,
		{
			"id": "https://damonbauer.dev/blog/ruby-destructure/",
			"url": "https://damonbauer.dev/blog/ruby-destructure/",
			"title": "Argument Destructuring In Ruby",
			"content_html": "<p>With a hash in the following structure:</p>\n<pre class=\"language-ruby\" tabindex=\"0\"><code class=\"language-ruby\"><span class=\"token punctuation\">{</span>\n  <span class=\"token string-literal\"><span class=\"token string\">\"2019-12-01\"</span></span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span><span class=\"token symbol\">title</span><span class=\"token operator\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"a title\"</span></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token symbol\">title</span><span class=\"token operator\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"another title\"</span></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string-literal\"><span class=\"token string\">\"2019-11-01\"</span></span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span><span class=\"token symbol\">title</span><span class=\"token operator\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"a title\"</span></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token symbol\">title</span><span class=\"token operator\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"another title\"</span></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>I wanted to iterate over it and find out the index of the iteration. This is easy enough to do, like so:</p>\n<pre class=\"language-ruby\" tabindex=\"0\"><code class=\"language-ruby\">hash<span class=\"token punctuation\">.</span>each_with_index<span class=\"token punctuation\">.</span>map <span class=\"token punctuation\">{</span> <span class=\"token operator\">|</span>collection<span class=\"token punctuation\">,</span> index<span class=\"token operator\">|</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span></code></pre>\n<p>The problem lies with the <code>collection</code> argument. Since my &quot;collection&quot; in each iteration is a key (&quot;2019-12-01&quot;) and a value (the array of hashes), the <code>collection</code> argument doesn't really tell me a whole lot about what it contains.</p>\n<p>Let's say I wanted to display the date and render a partial for each hash in the array:</p>\n<pre class=\"language-ruby\" tabindex=\"0\"><code class=\"language-ruby\"><span class=\"token operator\">&lt;</span><span class=\"token operator\">%</span> hash<span class=\"token punctuation\">.</span>each_with_index<span class=\"token punctuation\">.</span>map <span class=\"token punctuation\">{</span> <span class=\"token operator\">|</span>collection<span class=\"token punctuation\">,</span> index<span class=\"token operator\">|</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span> <span class=\"token string-literal\"><span class=\"token string\">%>\n  &lt;div id=\"container-&lt;%= index %></span></span>\"<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>Date<span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">%=</span> collection<span class=\"token punctuation\">.</span>first <span class=\"token string-literal\"><span class=\"token string\">%>&lt;/p></span></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">%=</span> render partial<span class=\"token operator\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"items\"</span></span> collection<span class=\"token operator\">:</span> collection<span class=\"token punctuation\">.</span>second <span class=\"token string-literal\"><span class=\"token string\">%>\n  &lt;/div></span></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">%</span> <span class=\"token keyword\">end</span> <span class=\"token operator\">%</span><span class=\"token operator\">></span></code></pre>\n<p>The <code>collection.first</code> and <code>collection.second</code> have no meaning and are really difficult to understand what they are, so I wanted to fix that.</p>\n<p>I could &quot;add&quot; meaning, at the cost of assigning 2 variables in each iteration:</p>\n<pre class=\"language-ruby\" tabindex=\"0\"><code class=\"language-ruby\"><span class=\"token operator\">&lt;</span><span class=\"token operator\">%</span> hash<span class=\"token punctuation\">.</span>each_with_index<span class=\"token punctuation\">.</span>map <span class=\"token punctuation\">{</span> <span class=\"token operator\">|</span>collection<span class=\"token punctuation\">,</span> index<span class=\"token operator\">|</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span> <span class=\"token string-literal\"><span class=\"token string\">%>\n  &lt;% date = collection.first %></span></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">%</span> items <span class=\"token operator\">=</span> collection<span class=\"token punctuation\">.</span>second <span class=\"token string-literal\"><span class=\"token string\">%>\n  \n  &lt;div id=\"container-&lt;%= index %></span></span>\"<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>Date<span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">%=</span> date <span class=\"token string-literal\"><span class=\"token string\">%>&lt;/p></span></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">%=</span> render partial<span class=\"token operator\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"items\"</span></span> collection<span class=\"token operator\">:</span> items <span class=\"token string-literal\"><span class=\"token string\">%>\n  &lt;/div></span></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">%</span> <span class=\"token keyword\">end</span> <span class=\"token operator\">%</span><span class=\"token operator\">></span></code></pre>\n<p>However, I don't like this approach because:</p>\n<ol>\n<li>The aforementioned need to assign variables in each iteration</li>\n<li>This works for a simple key/value hash setup like this example, but might not work for anything more complex</li>\n<li>If the order of the <code>collection</code> hash changes, the variable have to change, too</li>\n</ol>\n<p>Coming from the JavaScript world, I've used <code>destructuring</code> quite often:</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token string\">\"bar\"</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// destructure</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> a<span class=\"token punctuation\">,</span> b <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"foo\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"bar\"</span></code></pre>\n<p>Well, I learned that Ruby has destructuring as well. So, my code can become:</p>\n<pre class=\"language-ruby\" tabindex=\"0\"><code class=\"language-ruby\"><span class=\"token operator\">&lt;</span><span class=\"token operator\">%</span> hash<span class=\"token punctuation\">.</span>each_with_index<span class=\"token punctuation\">.</span>map <span class=\"token punctuation\">{</span> <span class=\"token operator\">|</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">,</span> items<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> index<span class=\"token operator\">|</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span> <span class=\"token string-literal\"><span class=\"token string\">%>\n  &lt;div id=\"container-&lt;%= index %></span></span>\"<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>Date<span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">%=</span> date <span class=\"token string-literal\"><span class=\"token string\">%>&lt;/p></span></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">%=</span> render partial<span class=\"token operator\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"items\"</span></span> collection<span class=\"token operator\">:</span> items <span class=\"token string-literal\"><span class=\"token string\">%>\n  &lt;/div></span></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">%</span> <span class=\"token keyword\">end</span> <span class=\"token operator\">%</span><span class=\"token operator\">></span></code></pre>\n",
			"date_published": "2019-12-29T00:00:00Z"
		}
		,
		{
			"id": "https://damonbauer.dev/blog/find-or-create-by/",
			"url": "https://damonbauer.dev/blog/find-or-create-by/",
			"title": "Find or Create By (Rails)",
			"content_html": "<p>Recently on a Rails project, I had the need to create a <code>shelf</code> record and associate it with a <code>book</code> record. (These particular records are using a <code>has_many :through</code> relationship).</p>\n<p>The problem I ran into was the need to search for a <code>book</code> to associate with; if it didn't exist, I needed to create it first... I found that Rails has me covered.</p>\n<p><a href=\"https://apidock.com/rails/v6.0.0/ActiveRecord/Relation/find_or_create_by\"><code>find_or_create_by</code></a> will either find a record with the provided attributes, or create it. (shocker)</p>\n<p>Here's how I used it:</p>\n<pre class=\"language-ruby\" tabindex=\"0\"><code class=\"language-ruby\"><span class=\"highlight-line\"><span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">add</span></span></span>\n<mark class=\"highlight-line highlight-line-active\">  shelf <span class=\"token operator\">=</span> find_or_create_shelf</mark>\n<mark class=\"highlight-line highlight-line-active\">  book <span class=\"token operator\">=</span> find_or_create_book</mark>\n<span class=\"highlight-line\">  SavedBook<span class=\"token punctuation\">.</span>create<span class=\"token punctuation\">(</span><span class=\"token symbol\">book_id</span><span class=\"token operator\">:</span> book<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> <span class=\"token symbol\">shelf_id</span><span class=\"token operator\">:</span> shelf<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">  redirect_to user_to_read_path<span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">[</span><span class=\"token symbol\">:user_id</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token symbol\">notice</span><span class=\"token operator\">:</span> <span class=\"token string-literal\"><span class=\"token string\">'✓ Book saved for later.'</span></span></span>\n<span class=\"highlight-line\"><span class=\"token keyword\">end</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"><span class=\"token keyword\">private</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"><span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">find_or_create_book</span></span></span>\n<mark class=\"highlight-line highlight-line-active\">    Book<span class=\"token punctuation\">.</span>find_or_create_by<span class=\"token punctuation\">(</span><span class=\"token symbol\">id</span><span class=\"token operator\">:</span> params<span class=\"token punctuation\">[</span><span class=\"token symbol\">:book_id</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></mark>\n<span class=\"highlight-line\">                           <span class=\"token symbol\">image</span><span class=\"token operator\">:</span> params<span class=\"token punctuation\">.</span>dig<span class=\"token punctuation\">(</span><span class=\"token symbol\">:book</span><span class=\"token punctuation\">,</span> <span class=\"token symbol\">:image</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></span>\n<span class=\"highlight-line\">                           <span class=\"token symbol\">title</span><span class=\"token operator\">:</span> params<span class=\"token punctuation\">.</span>dig<span class=\"token punctuation\">(</span><span class=\"token symbol\">:book</span><span class=\"token punctuation\">,</span> <span class=\"token symbol\">:title</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></span>\n<span class=\"highlight-line\">                           <span class=\"token symbol\">author</span><span class=\"token operator\">:</span> params<span class=\"token punctuation\">.</span>dig<span class=\"token punctuation\">(</span><span class=\"token symbol\">:book</span><span class=\"token punctuation\">,</span> <span class=\"token symbol\">:author</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">  <span class=\"token keyword\">end</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">find_or_create_shelf</span></span></span>\n<mark class=\"highlight-line highlight-line-active\">    Shelf<span class=\"token punctuation\">.</span>find_or_create_by<span class=\"token punctuation\">(</span><span class=\"token symbol\">user_id</span><span class=\"token operator\">:</span> params<span class=\"token punctuation\">[</span><span class=\"token symbol\">:user_id</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></mark>\n<span class=\"highlight-line\">  <span class=\"token keyword\">end</span></span></code></pre>\n",
			"date_published": "2019-12-27T00:00:00Z"
		}
		,
		{
			"id": "https://damonbauer.dev/blog/js-errors-newrelic/",
			"url": "https://damonbauer.dev/blog/js-errors-newrelic/",
			"title": "Reporting JavaScript Errors To New Relic",
			"content_html": "<p>With New Relic configured properly, unhandled exceptions will be handled and recorded by New Relic automatically. If you want to record a error manually while allowing your code to continue to execute, you can build a quick utility function.</p>\n<h3 id=\"utility-function\" tabindex=\"-1\">Utility Function <a class=\"header-anchor\" href=\"https://damonbauer.dev/blog/js-errors-newrelic/\" aria-hidden=\"true\">#</a></h3>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token comment\">// src/utils.js</span>\n\n<span class=\"token comment\">/**\n * Log an instance of an Error to New Relic.\n * @param error Error - The error to log.\n * @returns undefined\n */</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">logErrorEvent</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\n    error <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Error</span> <span class=\"token operator\">&amp;&amp;</span>\n    window<span class=\"token punctuation\">.</span>newrelic <span class=\"token operator\">&amp;&amp;</span>\n    <span class=\"token keyword\">typeof</span> window<span class=\"token punctuation\">.</span>newrelic<span class=\"token punctuation\">.</span>noticeError <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span>\n  <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    window<span class=\"token punctuation\">.</span>newrelic<span class=\"token punctuation\">.</span><span class=\"token function\">noticeError</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">{</span> logErrorEvent <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p>The <code>if</code> in this function checks to make sure:</p>\n<ol>\n<li>Is the argument to <code>error</code> an instance of the <code>Error</code> class?</li>\n<li>Is <code>window.newrelic</code> defined?</li>\n<li>Is <code>window.newrelic.noticeError</code> defined &amp; is it a <code>function</code>?</li>\n</ol>\n<h3 id=\"usage\" tabindex=\"-1\">Usage <a class=\"header-anchor\" href=\"https://damonbauer.dev/blog/js-errors-newrelic/\" aria-hidden=\"true\">#</a></h3>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> logErrorEvent <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./src/utils'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://example.com'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">json</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">.</span>code<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">logErrorEvent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">.</span>code<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> <span class=\"token function\">logErrorEvent</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n",
			"date_published": "2019-12-20T00:00:00Z"
		}
		,
		{
			"id": "https://damonbauer.dev/blog/testing-stimulus-with-jest/",
			"url": "https://damonbauer.dev/blog/testing-stimulus-with-jest/",
			"title": "Testing Stimulus With Jest",
			"content_html": "<p>I've been introducing <a href=\"https://stimulusjs.org/\">Stimulus</a> to a Rails app that uses <a href=\"https://jestjs.io/\">Jest</a> for testing JavaScript. After some research, I've found a pretty decent setup that allows me to load up a Stimulus controller to writes tests. If you need to do the same, here are some things you'll need, as well as some nice-to-haves.</p>\n<h3 id=\"mutationobserver\" tabindex=\"-1\">MutationObserver <a class=\"header-anchor\" href=\"https://damonbauer.dev/blog/testing-stimulus-with-jest/\" aria-hidden=\"true\">#</a></h3>\n<p>Stimulus relies on <code>MutationObserver</code>, but Jest (which uses jsdom under the hood) doesn't support it, so you'll need to fake it. Thankfully, there's a <a href=\"https://www.npmjs.com/package/%60mutationobserver-shim%60\">mutationobserver-shim</a> that handles it for you. Install it by running <code>yarn i mutationobserver-shim --dev</code>.</p>\n<p>You'll also need a Jest setup script. I like to make a <code>setup-jest.js</code> file in the root of my project. Inside, import the shim:</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token comment\">// ./setup-jest.js</span>\n<span class=\"token keyword\">import</span> <span class=\"token string\">'mutationobserver-shim'</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Make sure you configure Jest to look for this file. I like to make a <code>jest-config.js</code> file in the root of my project; this file holds all the configuration I need for Jest. Set the <code>setupFilesAfterEnv</code> option to look for the setup file:</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token comment\">// ./jest-config.js</span>\n<span class=\"token comment\">// other config...</span>\n<span class=\"token literal-property property\">setupFilesAfterEnv</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token string\">'&lt;rootDir>/setup-jest.js'</span>\n<span class=\"token punctuation\">]</span></code></pre>\n<h3 id=\"writing-a-test\" tabindex=\"-1\">Writing A Test <a class=\"header-anchor\" href=\"https://damonbauer.dev/blog/testing-stimulus-with-jest/\" aria-hidden=\"true\">#</a></h3>\n<p>Now, it's just a matter of including your Stimulus controller in your test. To do so, you'll need to import and &quot;start&quot; Stimulus, and register your controller that you want to test:</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Application <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'stimulus'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> HelloWorldController <span class=\"token keyword\">from</span> <span class=\"token string\">'../../controllers/hello_world_controller'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">startStimulus</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> application <span class=\"token operator\">=</span> Application<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  application<span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello-world'</span><span class=\"token punctuation\">,</span> HelloWorldController<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'the file under test'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">startStimulus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>innerHtml <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n      &lt;form data-controller=\"hello-world\">\n        &lt;input type=\"text\" data-testid=\"Foo\">\n        &lt;button name=\"button\" type=\"submit\" disabled=\"disabled\">Verify&lt;/button>\n      &lt;/form>\n    </span><span class=\"token template-punctuation string\">`</span></span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a scenario'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'tests the scenario'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// ...</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h3 id=\"nice-to-haves\" tabindex=\"-1\">Nice To Haves <a class=\"header-anchor\" href=\"https://damonbauer.dev/blog/testing-stimulus-with-jest/\" aria-hidden=\"true\">#</a></h3>\n<h4 id=\"dom-testing-library\" tabindex=\"-1\">dom-testing-library <a class=\"header-anchor\" href=\"https://damonbauer.dev/blog/testing-stimulus-with-jest/\" aria-hidden=\"true\">#</a></h4>\n<p>I like to use <a href=\"https://testing-library.com/docs/dom-testing-library/intro\">dom-testing-library</a> to make accessing &amp; manipulating the DOM easier in tests. When writing tests for Stimulus controllers, I've found that <code>getByTestId</code> and <code>waitForDomChange</code> are 2 especially helpful methods.</p>\n<h4 id=\"mountdom-cleanupdom\" tabindex=\"-1\">mountDOM / cleanupDOM <a class=\"header-anchor\" href=\"https://damonbauer.dev/blog/testing-stimulus-with-jest/\" aria-hidden=\"true\">#</a></h4>\n<p>I wrote a few quick helper methods that make it easy to add &amp; remove markup from the DOM. These live in a <code>utils.js</code> file in <code>app/javascript/__tests__/utils.js</code>.</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token comment\">// app/javascript/__tests__/utils.js</span>\n\n<span class=\"token comment\">/**\n * Inserts a string of HTML into the DOM.\n * @param {string} htmlString - The HTML to insert.\n * @returns {HTMLElement} The newly inserted DOM element.\n */</span>\n<span class=\"token keyword\">const</span> mountDOM <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>htmlString <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> div <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  div<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> htmlString<span class=\"token punctuation\">;</span>\n  document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>div<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> div<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">cleanupDOM</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">{</span>\n  cleanupDOM<span class=\"token punctuation\">,</span>\n  mountDOM\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Typically, a test I write will use these methods like so:</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">let</span> container <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'the file under test'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">afterEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">cleanupDOM</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a scenario'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'tests the scenario'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      container <span class=\"token operator\">=</span> <span class=\"token function\">mountDOM</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n        &lt;form data-controller=\"hello-world\">\n          &lt;input type=\"text\" data-testid=\"Foo\">\n          &lt;button name=\"button\" type=\"submit\" disabled=\"disabled\">Verify&lt;/button>\n        &lt;/form>\n      </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">// Continue with the test...</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n",
			"date_published": "2019-11-03T00:00:00Z"
		}
		,
		{
			"id": "https://damonbauer.dev/blog/eleventy-netlify-github/",
			"url": "https://damonbauer.dev/blog/eleventy-netlify-github/",
			"title": "Blog With Eleventy, Netlify &amp; GitHub",
			"content_html": "<p>I have blogged on and off for a long time, using Wordpress, Jekyll and a few other random tools. I've never stuck with it (this iteration will probably suffer the same fate, if I'm honest).</p>\n<p>I've been feeling the pull to just write stuff down - even if it's not well formed, organized or polished. More of a recording of what I was doing/thinking/learning at the time. Thus, this iteration of a blog was born.</p>\n<p>One of the most annoying things of blogging to me is hosting &amp; infrastructure. Things have progressed quite rapidly in the space of <a href=\"https://www.staticgen.com/\">static site generators</a>, so I thought I could make this work. I've landed on a setup that is pretty nice so far &amp; wanted to document it.</p>\n<h2 id=\"eleventy\" tabindex=\"-1\">Eleventy <a class=\"header-anchor\" href=\"https://damonbauer.dev/blog/eleventy-netlify-github/\" aria-hidden=\"true\">#</a></h2>\n<p>To build the actual posts &amp; pages, I chose <a href=\"https://www.11ty.io/\">Eleventy</a>, and I cloned the <a href=\"https://github.com/arpitbatra123/eleventy-blog-mnml\">eleventy-blog-mnml</a> repo because it is <em>super</em> basic, which is what I enjoy. I wanted the least amount of features and friction to start.</p>\n<p><a href=\"https://github.com/damonbauer/site\">Here's the repo</a> that powers the site you're on right now.</p>\n<h2 id=\"github\" tabindex=\"-1\">GitHub <a class=\"header-anchor\" href=\"https://damonbauer.dev/blog/eleventy-netlify-github/\" aria-hidden=\"true\">#</a></h2>\n<p>I tried using GitHub Actions for the first time to handle building the site. It's a small sample size, but it works seamlessly &amp; I am impressed with how fast this process goes.</p>\n<p><a href=\"https://github.com/damonbauer/site/blob/master/.github/workflows/build-deploy.yml\">This is the GitHub action</a> I'm using to build the site using Eleventy &amp; push the built artifact to the <code>gh-pages</code> branch of the repo.</p>\n<pre class=\"language-yaml\" tabindex=\"0\"><code class=\"language-yaml\"><span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Build &amp; Deploy\n\n<span class=\"token key atrule\">on</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">push</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">branches</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> master\n\n<span class=\"token key atrule\">jobs</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">build-and-deploy</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">runs-on</span><span class=\"token punctuation\">:</span> ubuntu<span class=\"token punctuation\">-</span>latest\n    <span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Checkout\n      <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/checkout@master\n      \n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Build and Deploy\n      <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> JamesIves/github<span class=\"token punctuation\">-</span>pages<span class=\"token punctuation\">-</span>deploy<span class=\"token punctuation\">-</span>action@master\n      <span class=\"token key atrule\">env</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">ACCESS_TOKEN</span><span class=\"token punctuation\">:</span> $\n        <span class=\"token key atrule\">BASE_BRANCH</span><span class=\"token punctuation\">:</span> master <span class=\"token comment\"># The branch the action should deploy from.</span>\n        <span class=\"token key atrule\">BRANCH</span><span class=\"token punctuation\">:</span> gh<span class=\"token punctuation\">-</span>pages <span class=\"token comment\"># The branch the action should deploy to.</span>\n        <span class=\"token key atrule\">FOLDER</span><span class=\"token punctuation\">:</span> _site <span class=\"token comment\"># The folder the action should deploy.</span>\n        <span class=\"token key atrule\">BUILD_SCRIPT</span><span class=\"token punctuation\">:</span> npm install <span class=\"token important\">&amp;&amp;</span> npm run build <span class=\"token comment\"># The build script the action should run prior to deploying.</span></code></pre>\n<p>Two things to note:</p>\n<ol>\n<li>You'll need to <a href=\"https://help.github.com/en/github/authenticating-to-github/creating-a-personal-access-token-for-the-command-line#creating-a-token\">generate a personal access token</a>, and store it in your repo secrets (Settings &gt; Secrets) as <code>ACCESS_TOKEN</code>.</li>\n<li>This uses an already built action, <a href=\"https://github.com/JamesIves/github-pages-deploy-action\">github-pages-deploy-action</a>, to handle pushing the Eleventy built site (which is in the <code>./_site</code> folder) to the repo's <code>gh-pages</code> branch.</li>\n</ol>\n<h2 id=\"netlify\" tabindex=\"-1\">Netlify <a class=\"header-anchor\" href=\"https://damonbauer.dev/blog/eleventy-netlify-github/\" aria-hidden=\"true\">#</a></h2>\n<p>Before this, I'd never used Netlify, but I've heard it is quite an enjoyable developer experience &amp; I now agree.</p>\n<p>I created an account and within 5 minutes I had purchased a domain name, got a free SSL certificate, and had a deploy system built to watch the <code>gh-pages</code> branch of my repo.</p>\n<p>About the only thing I changed was <code>Settings &gt; Build &amp; Deploy &gt; Continuous Deployment &gt; Deploy Contexts</code>, where I set <code>production-branch</code> to <code>gh-pages</code>.</p>\n<h2 id=\"all-together\" tabindex=\"-1\">All Together <a class=\"header-anchor\" href=\"https://damonbauer.dev/blog/eleventy-netlify-github/\" aria-hidden=\"true\">#</a></h2>\n<p>The whole system works like this:</p>\n<ol>\n<li>I make a branch, where I author a new post.</li>\n<li>Make a PR against <code>master</code> and merge the PR.</li>\n<li>The GitHub action kicks off, which runs Eleventy to build the site into the <code>./_site</code> folder &amp; pushes that to the <code>gh-pages</code> branch.</li>\n<li>Netlify sees a change to the <code>gh-pages</code> branch and re-deploys the contents of the branch to the domain.</li>\n</ol>\n",
			"date_published": "2019-11-03T00:00:00Z"
		}
		
	]
}
